{"remainingRequest":"E:\\Vueworkspace\\blog\\node_modules\\babel-loader\\lib\\index.js??ref--3-1!E:\\Vueworkspace\\blog\\node_modules\\vuepress-plugin-redirect\\lib\\enhanceApp.js","dependencies":[{"path":"E:\\Vueworkspace\\blog\\node_modules\\vuepress-plugin-redirect\\lib\\enhanceApp.js","mtime":499162500000},{"path":"E:\\Vueworkspace\\blog\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\Vueworkspace\\blog\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}